// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class orfeed extends ethereum.SmartContract {
  static bind(address: Address): orfeed {
    return new orfeed("orfeed", address);
  }

  addFreeCurrency(
    symb: string,
    tokenAddress: Address,
    byteCode: Bytes
  ): boolean {
    let result = super.call(
      "addFreeCurrency",
      "addFreeCurrency(string,address,bytes32):(bool)",
      [
        ethereum.Value.fromString(symb),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromFixedBytes(byteCode)
      ]
    );

    return result[0].toBoolean();
  }

  try_addFreeCurrency(
    symb: string,
    tokenAddress: Address,
    byteCode: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addFreeCurrency",
      "addFreeCurrency(string,address,bytes32):(bool)",
      [
        ethereum.Value.fromString(symb),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromFixedBytes(byteCode)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getExchangeRate(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "getExchangeRate",
      "getExchangeRate(string,string,string,uint256):(uint256)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getExchangeRate(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeRate",
      "getExchangeRate(string,string,string,uint256):(uint256)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestAsyncExchangeRateResult(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt,
    referenceId: string
  ): BigInt {
    let result = super.call(
      "requestAsyncExchangeRateResult",
      "requestAsyncExchangeRateResult(string,string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(referenceId)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestAsyncExchangeRateResult(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt,
    referenceId: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestAsyncExchangeRateResult",
      "requestAsyncExchangeRateResult(string,string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(referenceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAsyncEventResult(
    eventName: string,
    source: string,
    referenceId: string
  ): string {
    let result = super.call(
      "getAsyncEventResult",
      "getAsyncEventResult(string,string,string):(string)",
      [
        ethereum.Value.fromString(eventName),
        ethereum.Value.fromString(source),
        ethereum.Value.fromString(referenceId)
      ]
    );

    return result[0].toString();
  }

  try_getAsyncEventResult(
    eventName: string,
    source: string,
    referenceId: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getAsyncEventResult",
      "getAsyncEventResult(string,string,string):(string)",
      [
        ethereum.Value.fromString(eventName),
        ethereum.Value.fromString(source),
        ethereum.Value.fromString(referenceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateMulDivConverter2(newDiv: BigInt, newMul: BigInt): boolean {
    let result = super.call(
      "updateMulDivConverter2",
      "updateMulDivConverter2(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateMulDivConverter2(
    newDiv: BigInt,
    newMul: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateMulDivConverter2",
      "updateMulDivConverter2(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSynthToTokenOutputAmount(
    synth: Bytes,
    token: Address,
    inputAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getSynthToTokenOutputAmount",
      "getSynthToTokenOutputAmount(bytes32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(synth),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inputAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSynthToTokenOutputAmount(
    synth: Bytes,
    token: Address,
    inputAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSynthToTokenOutputAmount",
      "getSynthToTokenOutputAmount(bytes32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(synth),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inputAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addFreeToken(symb: string, tokenAddress: Address): boolean {
    let result = super.call(
      "addFreeToken",
      "addFreeToken(string,address):(bool)",
      [
        ethereum.Value.fromString(symb),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_addFreeToken(
    symb: string,
    tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addFreeToken",
      "addFreeToken(string,address):(bool)",
      [
        ethereum.Value.fromString(symb),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  compare(_a: string, _b: string): BigInt {
    let result = super.call("compare", "compare(string,string):(int256)", [
      ethereum.Value.fromString(_a),
      ethereum.Value.fromString(_b)
    ]);

    return result[0].toBigInt();
  }

  try_compare(_a: string, _b: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("compare", "compare(string,string):(int256)", [
      ethereum.Value.fromString(_a),
      ethereum.Value.fromString(_b)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateForexOracleAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateForexOracleAddress",
      "updateForexOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateForexOracleAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateForexOracleAddress",
      "updateForexOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  equal(_a: string, _b: string): boolean {
    let result = super.call("equal", "equal(string,string):(bool)", [
      ethereum.Value.fromString(_a),
      ethereum.Value.fromString(_b)
    ]);

    return result[0].toBoolean();
  }

  try_equal(_a: string, _b: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("equal", "equal(string,string):(bool)", [
      ethereum.Value.fromString(_a),
      ethereum.Value.fromString(_b)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEventResult(eventName: string, source: string): string {
    let result = super.call(
      "getEventResult",
      "getEventResult(string,string):(string)",
      [ethereum.Value.fromString(eventName), ethereum.Value.fromString(source)]
    );

    return result[0].toString();
  }

  try_getEventResult(
    eventName: string,
    source: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getEventResult",
      "getEventResult(string,string):(string)",
      [ethereum.Value.fromString(eventName), ethereum.Value.fromString(source)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateSynthAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateSynthAddress",
      "updateSynthAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateSynthAddress(newOracle: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSynthAddress",
      "updateSynthAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateMulDivConverter1(newDiv: BigInt, newMul: BigInt): boolean {
    let result = super.call(
      "updateMulDivConverter1",
      "updateMulDivConverter1(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateMulDivConverter1(
    newDiv: BigInt,
    newMul: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateMulDivConverter1",
      "updateMulDivConverter1(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateMulDivConverter3(newDiv: BigInt, newMul: BigInt): boolean {
    let result = super.call(
      "updateMulDivConverter3",
      "updateMulDivConverter3(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateMulDivConverter3(
    newDiv: BigInt,
    newMul: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateMulDivConverter3",
      "updateMulDivConverter3(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeFreeToken(symb: string): boolean {
    let result = super.call(
      "removeFreeToken",
      "removeFreeToken(string):(bool)",
      [ethereum.Value.fromString(symb)]
    );

    return result[0].toBoolean();
  }

  try_removeFreeToken(symb: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeFreeToken",
      "removeFreeToken(string):(bool)",
      [ethereum.Value.fromString(symb)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateEthTokenAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateEthTokenAddress",
      "updateEthTokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateEthTokenAddress(newOracle: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateEthTokenAddress",
      "updateEthTokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatePremiumSubOracleAddress(newOracle: Address): boolean {
    let result = super.call(
      "updatePremiumSubOracleAddress",
      "updatePremiumSubOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updatePremiumSubOracleAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updatePremiumSubOracleAddress",
      "updatePremiumSubOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indexOf(_haystack: string, _needle: string): BigInt {
    let result = super.call("indexOf", "indexOf(string,string):(int256)", [
      ethereum.Value.fromString(_haystack),
      ethereum.Value.fromString(_needle)
    ]);

    return result[0].toBigInt();
  }

  try_indexOf(_haystack: string, _needle: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexOf", "indexOf(string,string):(int256)", [
      ethereum.Value.fromString(_haystack),
      ethereum.Value.fromString(_needle)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeFreeCurrency(symb: string): boolean {
    let result = super.call(
      "removeFreeCurrency",
      "removeFreeCurrency(string):(bool)",
      [ethereum.Value.fromString(symb)]
    );

    return result[0].toBoolean();
  }

  try_removeFreeCurrency(symb: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeFreeCurrency",
      "removeFreeCurrency(string):(bool)",
      [ethereum.Value.fromString(symb)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateAsyncOracleAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateAsyncOracleAddress",
      "updateAsyncOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateAsyncOracleAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateAsyncOracleAddress",
      "updateAsyncOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFreeVenueCheck(venueToCheck: string): boolean {
    let result = super.call(
      "isFreeVenueCheck",
      "isFreeVenueCheck(string):(bool)",
      [ethereum.Value.fromString(venueToCheck)]
    );

    return result[0].toBoolean();
  }

  try_isFreeVenueCheck(venueToCheck: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFreeVenueCheck",
      "isFreeVenueCheck(string):(bool)",
      [ethereum.Value.fromString(venueToCheck)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFree(symToCheck: string): boolean {
    let result = super.call("isFree", "isFree(string):(bool)", [
      ethereum.Value.fromString(symToCheck)
    ]);

    return result[0].toBoolean();
  }

  try_isFree(symToCheck: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFree", "isFree(string):(bool)", [
      ethereum.Value.fromString(symToCheck)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateArbContractAddress(newAddress: Address): boolean {
    let result = super.call(
      "updateArbContractAddress",
      "updateArbContractAddress(address):(bool)",
      [ethereum.Value.fromAddress(newAddress)]
    );

    return result[0].toBoolean();
  }

  try_updateArbContractAddress(
    newAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateArbContractAddress",
      "updateArbContractAddress(address):(bool)",
      [ethereum.Value.fromAddress(newAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  changeOwner(newOwner: Address): boolean {
    let result = super.call("changeOwner", "changeOwner(address):(bool)", [
      ethereum.Value.fromAddress(newOwner)
    ]);

    return result[0].toBoolean();
  }

  try_changeOwner(newOwner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("changeOwner", "changeOwner(address):(bool)", [
      ethereum.Value.fromAddress(newOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateAsyncEventsAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateAsyncEventsAddress",
      "updateAsyncEventsAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateAsyncEventsAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateAsyncEventsAddress",
      "updateAsyncEventsAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTokenDecimalCount(tokenAddress: Address): BigInt {
    let result = super.call(
      "getTokenDecimalCount",
      "getTokenDecimalCount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getTokenDecimalCount(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenDecimalCount",
      "getTokenDecimalCount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compareStrings(a: string, b: string): boolean {
    let result = super.call(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );

    return result[0].toBoolean();
  }

  try_compareStrings(a: string, b: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestAsyncEvent(eventName: string, source: string): string {
    let result = super.call(
      "requestAsyncEvent",
      "requestAsyncEvent(string,string):(string)",
      [ethereum.Value.fromString(eventName), ethereum.Value.fromString(source)]
    );

    return result[0].toString();
  }

  try_requestAsyncEvent(
    eventName: string,
    source: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "requestAsyncEvent",
      "requestAsyncEvent(string,string):(string)",
      [ethereum.Value.fromString(eventName), ethereum.Value.fromString(source)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTokenAddress(symbol: string): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress(string):(address)",
      [ethereum.Value.fromString(symbol)]
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(symbol: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress(string):(address)",
      [ethereum.Value.fromString(symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenToSynthOutputAmount(
    token: Address,
    synth: Bytes,
    inputAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getTokenToSynthOutputAmount",
      "getTokenToSynthOutputAmount(address,bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromFixedBytes(synth),
        ethereum.Value.fromUnsignedBigInt(inputAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenToSynthOutputAmount(
    token: Address,
    synth: Bytes,
    inputAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenToSynthOutputAmount",
      "getTokenToSynthOutputAmount(address,bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromFixedBytes(synth),
        ethereum.Value.fromUnsignedBigInt(inputAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stringToBytes32(source: string): Bytes {
    let result = super.call(
      "stringToBytes32",
      "stringToBytes32(string):(bytes32)",
      [ethereum.Value.fromString(source)]
    );

    return result[0].toBytes();
  }

  try_stringToBytes32(source: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "stringToBytes32",
      "stringToBytes32(string):(bytes32)",
      [ethereum.Value.fromString(source)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requestAsyncExchangeRate(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt
  ): string {
    let result = super.call(
      "requestAsyncExchangeRate",
      "requestAsyncExchangeRate(string,string,string,uint256):(string)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toString();
  }

  try_requestAsyncExchangeRate(
    fromSymbol: string,
    toSymbol: string,
    venue: string,
    amount: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "requestAsyncExchangeRate",
      "requestAsyncExchangeRate(string,string,string,uint256):(string)",
      [
        ethereum.Value.fromString(fromSymbol),
        ethereum.Value.fromString(toSymbol),
        ethereum.Value.fromString(venue),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateTokenOracleAddress2(newOracle: Address): boolean {
    let result = super.call(
      "updateTokenOracleAddress2",
      "updateTokenOracleAddress2(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateTokenOracleAddress2(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateTokenOracleAddress2",
      "updateTokenOracleAddress2(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateSyncEventsAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateSyncEventsAddress",
      "updateSyncEventsAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateSyncEventsAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSyncEventsAddress",
      "updateSyncEventsAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSynthBytes32(symbol: string): Bytes {
    let result = super.call(
      "getSynthBytes32",
      "getSynthBytes32(string):(bytes32)",
      [ethereum.Value.fromString(symbol)]
    );

    return result[0].toBytes();
  }

  try_getSynthBytes32(symbol: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSynthBytes32",
      "getSynthBytes32(string):(bytes32)",
      [ethereum.Value.fromString(symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFreeExchangeRate(
    fromSymb: string,
    toSymb: string,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "getFreeExchangeRate",
      "getFreeExchangeRate(string,string,uint256):(uint256)",
      [
        ethereum.Value.fromString(fromSymb),
        ethereum.Value.fromString(toSymb),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getFreeExchangeRate(
    fromSymb: string,
    toSymb: string,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFreeExchangeRate",
      "getFreeExchangeRate(string,string,uint256):(uint256)",
      [
        ethereum.Value.fromString(fromSymb),
        ethereum.Value.fromString(toSymb),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateTokenOracleAddress(newOracle: Address): boolean {
    let result = super.call(
      "updateTokenOracleAddress",
      "updateTokenOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBoolean();
  }

  try_updateTokenOracleAddress(
    newOracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateTokenOracleAddress",
      "updateTokenOracleAddress(address):(bool)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateMulDivConverter4(newDiv: BigInt, newMul: BigInt): boolean {
    let result = super.call(
      "updateMulDivConverter4",
      "updateMulDivConverter4(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateMulDivConverter4(
    newDiv: BigInt,
    newMul: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateMulDivConverter4",
      "updateMulDivConverter4(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newDiv),
        ethereum.Value.fromUnsignedBigInt(newMul)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getForexAddress(symbol: string): Address {
    let result = super.call(
      "getForexAddress",
      "getForexAddress(string):(address)",
      [ethereum.Value.fromString(symbol)]
    );

    return result[0].toAddress();
  }

  try_getForexAddress(symbol: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getForexAddress",
      "getForexAddress(string):(address)",
      [ethereum.Value.fromString(symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  callExtraFunction(
    param1: string,
    param2: string,
    param3: string,
    param4: string
  ): string {
    let result = super.call(
      "callExtraFunction",
      "callExtraFunction(string,string,string,string):(string)",
      [
        ethereum.Value.fromString(param1),
        ethereum.Value.fromString(param2),
        ethereum.Value.fromString(param3),
        ethereum.Value.fromString(param4)
      ]
    );

    return result[0].toString();
  }

  try_callExtraFunction(
    param1: string,
    param2: string,
    param3: string,
    param4: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "callExtraFunction",
      "callExtraFunction(string,string,string,string):(string)",
      [
        ethereum.Value.fromString(param1),
        ethereum.Value.fromString(param2),
        ethereum.Value.fromString(param3),
        ethereum.Value.fromString(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddFreeCurrencyCall extends ethereum.Call {
  get inputs(): AddFreeCurrencyCall__Inputs {
    return new AddFreeCurrencyCall__Inputs(this);
  }

  get outputs(): AddFreeCurrencyCall__Outputs {
    return new AddFreeCurrencyCall__Outputs(this);
  }
}

export class AddFreeCurrencyCall__Inputs {
  _call: AddFreeCurrencyCall;

  constructor(call: AddFreeCurrencyCall) {
    this._call = call;
  }

  get symb(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get byteCode(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddFreeCurrencyCall__Outputs {
  _call: AddFreeCurrencyCall;

  constructor(call: AddFreeCurrencyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateMulDivConverter2Call extends ethereum.Call {
  get inputs(): UpdateMulDivConverter2Call__Inputs {
    return new UpdateMulDivConverter2Call__Inputs(this);
  }

  get outputs(): UpdateMulDivConverter2Call__Outputs {
    return new UpdateMulDivConverter2Call__Outputs(this);
  }
}

export class UpdateMulDivConverter2Call__Inputs {
  _call: UpdateMulDivConverter2Call;

  constructor(call: UpdateMulDivConverter2Call) {
    this._call = call;
  }

  get newDiv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMul(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMulDivConverter2Call__Outputs {
  _call: UpdateMulDivConverter2Call;

  constructor(call: UpdateMulDivConverter2Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GetSynthToTokenOutputAmountCall extends ethereum.Call {
  get inputs(): GetSynthToTokenOutputAmountCall__Inputs {
    return new GetSynthToTokenOutputAmountCall__Inputs(this);
  }

  get outputs(): GetSynthToTokenOutputAmountCall__Outputs {
    return new GetSynthToTokenOutputAmountCall__Outputs(this);
  }
}

export class GetSynthToTokenOutputAmountCall__Inputs {
  _call: GetSynthToTokenOutputAmountCall;

  constructor(call: GetSynthToTokenOutputAmountCall) {
    this._call = call;
  }

  get synth(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GetSynthToTokenOutputAmountCall__Outputs {
  _call: GetSynthToTokenOutputAmountCall;

  constructor(call: GetSynthToTokenOutputAmountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddFreeTokenCall extends ethereum.Call {
  get inputs(): AddFreeTokenCall__Inputs {
    return new AddFreeTokenCall__Inputs(this);
  }

  get outputs(): AddFreeTokenCall__Outputs {
    return new AddFreeTokenCall__Outputs(this);
  }
}

export class AddFreeTokenCall__Inputs {
  _call: AddFreeTokenCall;

  constructor(call: AddFreeTokenCall) {
    this._call = call;
  }

  get symb(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddFreeTokenCall__Outputs {
  _call: AddFreeTokenCall;

  constructor(call: AddFreeTokenCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CompareCall extends ethereum.Call {
  get inputs(): CompareCall__Inputs {
    return new CompareCall__Inputs(this);
  }

  get outputs(): CompareCall__Outputs {
    return new CompareCall__Outputs(this);
  }
}

export class CompareCall__Inputs {
  _call: CompareCall;

  constructor(call: CompareCall) {
    this._call = call;
  }

  get _a(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _b(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CompareCall__Outputs {
  _call: CompareCall;

  constructor(call: CompareCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateForexOracleAddressCall extends ethereum.Call {
  get inputs(): UpdateForexOracleAddressCall__Inputs {
    return new UpdateForexOracleAddressCall__Inputs(this);
  }

  get outputs(): UpdateForexOracleAddressCall__Outputs {
    return new UpdateForexOracleAddressCall__Outputs(this);
  }
}

export class UpdateForexOracleAddressCall__Inputs {
  _call: UpdateForexOracleAddressCall;

  constructor(call: UpdateForexOracleAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateForexOracleAddressCall__Outputs {
  _call: UpdateForexOracleAddressCall;

  constructor(call: UpdateForexOracleAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EqualCall extends ethereum.Call {
  get inputs(): EqualCall__Inputs {
    return new EqualCall__Inputs(this);
  }

  get outputs(): EqualCall__Outputs {
    return new EqualCall__Outputs(this);
  }
}

export class EqualCall__Inputs {
  _call: EqualCall;

  constructor(call: EqualCall) {
    this._call = call;
  }

  get _a(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _b(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class EqualCall__Outputs {
  _call: EqualCall;

  constructor(call: EqualCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSynthAddressCall extends ethereum.Call {
  get inputs(): UpdateSynthAddressCall__Inputs {
    return new UpdateSynthAddressCall__Inputs(this);
  }

  get outputs(): UpdateSynthAddressCall__Outputs {
    return new UpdateSynthAddressCall__Outputs(this);
  }
}

export class UpdateSynthAddressCall__Inputs {
  _call: UpdateSynthAddressCall;

  constructor(call: UpdateSynthAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSynthAddressCall__Outputs {
  _call: UpdateSynthAddressCall;

  constructor(call: UpdateSynthAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateMulDivConverter1Call extends ethereum.Call {
  get inputs(): UpdateMulDivConverter1Call__Inputs {
    return new UpdateMulDivConverter1Call__Inputs(this);
  }

  get outputs(): UpdateMulDivConverter1Call__Outputs {
    return new UpdateMulDivConverter1Call__Outputs(this);
  }
}

export class UpdateMulDivConverter1Call__Inputs {
  _call: UpdateMulDivConverter1Call;

  constructor(call: UpdateMulDivConverter1Call) {
    this._call = call;
  }

  get newDiv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMul(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMulDivConverter1Call__Outputs {
  _call: UpdateMulDivConverter1Call;

  constructor(call: UpdateMulDivConverter1Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateMulDivConverter3Call extends ethereum.Call {
  get inputs(): UpdateMulDivConverter3Call__Inputs {
    return new UpdateMulDivConverter3Call__Inputs(this);
  }

  get outputs(): UpdateMulDivConverter3Call__Outputs {
    return new UpdateMulDivConverter3Call__Outputs(this);
  }
}

export class UpdateMulDivConverter3Call__Inputs {
  _call: UpdateMulDivConverter3Call;

  constructor(call: UpdateMulDivConverter3Call) {
    this._call = call;
  }

  get newDiv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMul(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMulDivConverter3Call__Outputs {
  _call: UpdateMulDivConverter3Call;

  constructor(call: UpdateMulDivConverter3Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveFreeTokenCall extends ethereum.Call {
  get inputs(): RemoveFreeTokenCall__Inputs {
    return new RemoveFreeTokenCall__Inputs(this);
  }

  get outputs(): RemoveFreeTokenCall__Outputs {
    return new RemoveFreeTokenCall__Outputs(this);
  }
}

export class RemoveFreeTokenCall__Inputs {
  _call: RemoveFreeTokenCall;

  constructor(call: RemoveFreeTokenCall) {
    this._call = call;
  }

  get symb(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RemoveFreeTokenCall__Outputs {
  _call: RemoveFreeTokenCall;

  constructor(call: RemoveFreeTokenCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateEthTokenAddressCall extends ethereum.Call {
  get inputs(): UpdateEthTokenAddressCall__Inputs {
    return new UpdateEthTokenAddressCall__Inputs(this);
  }

  get outputs(): UpdateEthTokenAddressCall__Outputs {
    return new UpdateEthTokenAddressCall__Outputs(this);
  }
}

export class UpdateEthTokenAddressCall__Inputs {
  _call: UpdateEthTokenAddressCall;

  constructor(call: UpdateEthTokenAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateEthTokenAddressCall__Outputs {
  _call: UpdateEthTokenAddressCall;

  constructor(call: UpdateEthTokenAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ArbCall extends ethereum.Call {
  get inputs(): ArbCall__Inputs {
    return new ArbCall__Inputs(this);
  }

  get outputs(): ArbCall__Outputs {
    return new ArbCall__Outputs(this);
  }
}

export class ArbCall__Inputs {
  _call: ArbCall;

  constructor(call: ArbCall) {
    this._call = call;
  }

  get fundsReturnToAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidityProviderContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get exchanges(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class ArbCall__Outputs {
  _call: ArbCall;

  constructor(call: ArbCall) {
    this._call = call;
  }

  get arbResp(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatePremiumSubOracleAddressCall extends ethereum.Call {
  get inputs(): UpdatePremiumSubOracleAddressCall__Inputs {
    return new UpdatePremiumSubOracleAddressCall__Inputs(this);
  }

  get outputs(): UpdatePremiumSubOracleAddressCall__Outputs {
    return new UpdatePremiumSubOracleAddressCall__Outputs(this);
  }
}

export class UpdatePremiumSubOracleAddressCall__Inputs {
  _call: UpdatePremiumSubOracleAddressCall;

  constructor(call: UpdatePremiumSubOracleAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePremiumSubOracleAddressCall__Outputs {
  _call: UpdatePremiumSubOracleAddressCall;

  constructor(call: UpdatePremiumSubOracleAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IndexOfCall extends ethereum.Call {
  get inputs(): IndexOfCall__Inputs {
    return new IndexOfCall__Inputs(this);
  }

  get outputs(): IndexOfCall__Outputs {
    return new IndexOfCall__Outputs(this);
  }
}

export class IndexOfCall__Inputs {
  _call: IndexOfCall;

  constructor(call: IndexOfCall) {
    this._call = call;
  }

  get _haystack(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _needle(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class IndexOfCall__Outputs {
  _call: IndexOfCall;

  constructor(call: IndexOfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveFreeCurrencyCall extends ethereum.Call {
  get inputs(): RemoveFreeCurrencyCall__Inputs {
    return new RemoveFreeCurrencyCall__Inputs(this);
  }

  get outputs(): RemoveFreeCurrencyCall__Outputs {
    return new RemoveFreeCurrencyCall__Outputs(this);
  }
}

export class RemoveFreeCurrencyCall__Inputs {
  _call: RemoveFreeCurrencyCall;

  constructor(call: RemoveFreeCurrencyCall) {
    this._call = call;
  }

  get symb(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RemoveFreeCurrencyCall__Outputs {
  _call: RemoveFreeCurrencyCall;

  constructor(call: RemoveFreeCurrencyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateAsyncOracleAddressCall extends ethereum.Call {
  get inputs(): UpdateAsyncOracleAddressCall__Inputs {
    return new UpdateAsyncOracleAddressCall__Inputs(this);
  }

  get outputs(): UpdateAsyncOracleAddressCall__Outputs {
    return new UpdateAsyncOracleAddressCall__Outputs(this);
  }
}

export class UpdateAsyncOracleAddressCall__Inputs {
  _call: UpdateAsyncOracleAddressCall;

  constructor(call: UpdateAsyncOracleAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAsyncOracleAddressCall__Outputs {
  _call: UpdateAsyncOracleAddressCall;

  constructor(call: UpdateAsyncOracleAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsFreeVenueCheckCall extends ethereum.Call {
  get inputs(): IsFreeVenueCheckCall__Inputs {
    return new IsFreeVenueCheckCall__Inputs(this);
  }

  get outputs(): IsFreeVenueCheckCall__Outputs {
    return new IsFreeVenueCheckCall__Outputs(this);
  }
}

export class IsFreeVenueCheckCall__Inputs {
  _call: IsFreeVenueCheckCall;

  constructor(call: IsFreeVenueCheckCall) {
    this._call = call;
  }

  get venueToCheck(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class IsFreeVenueCheckCall__Outputs {
  _call: IsFreeVenueCheckCall;

  constructor(call: IsFreeVenueCheckCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsFreeCall extends ethereum.Call {
  get inputs(): IsFreeCall__Inputs {
    return new IsFreeCall__Inputs(this);
  }

  get outputs(): IsFreeCall__Outputs {
    return new IsFreeCall__Outputs(this);
  }
}

export class IsFreeCall__Inputs {
  _call: IsFreeCall;

  constructor(call: IsFreeCall) {
    this._call = call;
  }

  get symToCheck(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class IsFreeCall__Outputs {
  _call: IsFreeCall;

  constructor(call: IsFreeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateArbContractAddressCall extends ethereum.Call {
  get inputs(): UpdateArbContractAddressCall__Inputs {
    return new UpdateArbContractAddressCall__Inputs(this);
  }

  get outputs(): UpdateArbContractAddressCall__Outputs {
    return new UpdateArbContractAddressCall__Outputs(this);
  }
}

export class UpdateArbContractAddressCall__Inputs {
  _call: UpdateArbContractAddressCall;

  constructor(call: UpdateArbContractAddressCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateArbContractAddressCall__Outputs {
  _call: UpdateArbContractAddressCall;

  constructor(call: UpdateArbContractAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateAsyncEventsAddressCall extends ethereum.Call {
  get inputs(): UpdateAsyncEventsAddressCall__Inputs {
    return new UpdateAsyncEventsAddressCall__Inputs(this);
  }

  get outputs(): UpdateAsyncEventsAddressCall__Outputs {
    return new UpdateAsyncEventsAddressCall__Outputs(this);
  }
}

export class UpdateAsyncEventsAddressCall__Inputs {
  _call: UpdateAsyncEventsAddressCall;

  constructor(call: UpdateAsyncEventsAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAsyncEventsAddressCall__Outputs {
  _call: UpdateAsyncEventsAddressCall;

  constructor(call: UpdateAsyncEventsAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RequestAsyncEventCall extends ethereum.Call {
  get inputs(): RequestAsyncEventCall__Inputs {
    return new RequestAsyncEventCall__Inputs(this);
  }

  get outputs(): RequestAsyncEventCall__Outputs {
    return new RequestAsyncEventCall__Outputs(this);
  }
}

export class RequestAsyncEventCall__Inputs {
  _call: RequestAsyncEventCall;

  constructor(call: RequestAsyncEventCall) {
    this._call = call;
  }

  get eventName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get source(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RequestAsyncEventCall__Outputs {
  _call: RequestAsyncEventCall;

  constructor(call: RequestAsyncEventCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class GetTokenToSynthOutputAmountCall extends ethereum.Call {
  get inputs(): GetTokenToSynthOutputAmountCall__Inputs {
    return new GetTokenToSynthOutputAmountCall__Inputs(this);
  }

  get outputs(): GetTokenToSynthOutputAmountCall__Outputs {
    return new GetTokenToSynthOutputAmountCall__Outputs(this);
  }
}

export class GetTokenToSynthOutputAmountCall__Inputs {
  _call: GetTokenToSynthOutputAmountCall;

  constructor(call: GetTokenToSynthOutputAmountCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get synth(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GetTokenToSynthOutputAmountCall__Outputs {
  _call: GetTokenToSynthOutputAmountCall;

  constructor(call: GetTokenToSynthOutputAmountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StringToBytes32Call extends ethereum.Call {
  get inputs(): StringToBytes32Call__Inputs {
    return new StringToBytes32Call__Inputs(this);
  }

  get outputs(): StringToBytes32Call__Outputs {
    return new StringToBytes32Call__Outputs(this);
  }
}

export class StringToBytes32Call__Inputs {
  _call: StringToBytes32Call;

  constructor(call: StringToBytes32Call) {
    this._call = call;
  }

  get source(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class StringToBytes32Call__Outputs {
  _call: StringToBytes32Call;

  constructor(call: StringToBytes32Call) {
    this._call = call;
  }

  get result(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RequestAsyncExchangeRateCall extends ethereum.Call {
  get inputs(): RequestAsyncExchangeRateCall__Inputs {
    return new RequestAsyncExchangeRateCall__Inputs(this);
  }

  get outputs(): RequestAsyncExchangeRateCall__Outputs {
    return new RequestAsyncExchangeRateCall__Outputs(this);
  }
}

export class RequestAsyncExchangeRateCall__Inputs {
  _call: RequestAsyncExchangeRateCall;

  constructor(call: RequestAsyncExchangeRateCall) {
    this._call = call;
  }

  get fromSymbol(): string {
    return this._call.inputValues[0].value.toString();
  }

  get toSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get venue(): string {
    return this._call.inputValues[2].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RequestAsyncExchangeRateCall__Outputs {
  _call: RequestAsyncExchangeRateCall;

  constructor(call: RequestAsyncExchangeRateCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class UpdateTokenOracleAddress2Call extends ethereum.Call {
  get inputs(): UpdateTokenOracleAddress2Call__Inputs {
    return new UpdateTokenOracleAddress2Call__Inputs(this);
  }

  get outputs(): UpdateTokenOracleAddress2Call__Outputs {
    return new UpdateTokenOracleAddress2Call__Outputs(this);
  }
}

export class UpdateTokenOracleAddress2Call__Inputs {
  _call: UpdateTokenOracleAddress2Call;

  constructor(call: UpdateTokenOracleAddress2Call) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTokenOracleAddress2Call__Outputs {
  _call: UpdateTokenOracleAddress2Call;

  constructor(call: UpdateTokenOracleAddress2Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSyncEventsAddressCall extends ethereum.Call {
  get inputs(): UpdateSyncEventsAddressCall__Inputs {
    return new UpdateSyncEventsAddressCall__Inputs(this);
  }

  get outputs(): UpdateSyncEventsAddressCall__Outputs {
    return new UpdateSyncEventsAddressCall__Outputs(this);
  }
}

export class UpdateSyncEventsAddressCall__Inputs {
  _call: UpdateSyncEventsAddressCall;

  constructor(call: UpdateSyncEventsAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSyncEventsAddressCall__Outputs {
  _call: UpdateSyncEventsAddressCall;

  constructor(call: UpdateSyncEventsAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GetFreeExchangeRateCall extends ethereum.Call {
  get inputs(): GetFreeExchangeRateCall__Inputs {
    return new GetFreeExchangeRateCall__Inputs(this);
  }

  get outputs(): GetFreeExchangeRateCall__Outputs {
    return new GetFreeExchangeRateCall__Outputs(this);
  }
}

export class GetFreeExchangeRateCall__Inputs {
  _call: GetFreeExchangeRateCall;

  constructor(call: GetFreeExchangeRateCall) {
    this._call = call;
  }

  get fromSymb(): string {
    return this._call.inputValues[0].value.toString();
  }

  get toSymb(): string {
    return this._call.inputValues[1].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GetFreeExchangeRateCall__Outputs {
  _call: GetFreeExchangeRateCall;

  constructor(call: GetFreeExchangeRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateTokenOracleAddressCall extends ethereum.Call {
  get inputs(): UpdateTokenOracleAddressCall__Inputs {
    return new UpdateTokenOracleAddressCall__Inputs(this);
  }

  get outputs(): UpdateTokenOracleAddressCall__Outputs {
    return new UpdateTokenOracleAddressCall__Outputs(this);
  }
}

export class UpdateTokenOracleAddressCall__Inputs {
  _call: UpdateTokenOracleAddressCall;

  constructor(call: UpdateTokenOracleAddressCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTokenOracleAddressCall__Outputs {
  _call: UpdateTokenOracleAddressCall;

  constructor(call: UpdateTokenOracleAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateMulDivConverter4Call extends ethereum.Call {
  get inputs(): UpdateMulDivConverter4Call__Inputs {
    return new UpdateMulDivConverter4Call__Inputs(this);
  }

  get outputs(): UpdateMulDivConverter4Call__Outputs {
    return new UpdateMulDivConverter4Call__Outputs(this);
  }
}

export class UpdateMulDivConverter4Call__Inputs {
  _call: UpdateMulDivConverter4Call;

  constructor(call: UpdateMulDivConverter4Call) {
    this._call = call;
  }

  get newDiv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMul(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMulDivConverter4Call__Outputs {
  _call: UpdateMulDivConverter4Call;

  constructor(call: UpdateMulDivConverter4Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CallExtraFunctionCall extends ethereum.Call {
  get inputs(): CallExtraFunctionCall__Inputs {
    return new CallExtraFunctionCall__Inputs(this);
  }

  get outputs(): CallExtraFunctionCall__Outputs {
    return new CallExtraFunctionCall__Outputs(this);
  }
}

export class CallExtraFunctionCall__Inputs {
  _call: CallExtraFunctionCall;

  constructor(call: CallExtraFunctionCall) {
    this._call = call;
  }

  get param1(): string {
    return this._call.inputValues[0].value.toString();
  }

  get param2(): string {
    return this._call.inputValues[1].value.toString();
  }

  get param3(): string {
    return this._call.inputValues[2].value.toString();
  }

  get param4(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CallExtraFunctionCall__Outputs {
  _call: CallExtraFunctionCall;

  constructor(call: CallExtraFunctionCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
